---
# tasks file for playbooks/roles/ocp-sso

- name: Check if cluster operators and nodes are healthy
  include_role:
    name: check-cluster-health

- name: Setup custom catalog source
  block:
  - name: Include the global-secret-update role
    include_role:
        name: global-secret-update  

  - name: Set fact variable for CatalogSource name
    set_fact:
      sso_catalogsource: "qe-app-registry"

  - name: Include role to create ImageContentSourcePolicy and CatalogSource
    include_role:
      name: set-custom-catalogsource
    vars:
      custom_catalogsource_name: "{{ sso_catalogsource }}"
      custom_catalogsource_display_name: "Secondary Scheduler Operator"
      custom_catalogsource_image: "{{ sso_catalogsource_image }}"
  when: sso_catalogsource_image != '' and sso_catalogsource_image != None

- name: Deploy Secondary Scheduler Operator
  block:
  - name: Create namespace for Secondary Scheduler Operator
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Namespace
        metadata:
          labels:
            pod-security.kubernetes.io/audit: restricted
            pod-security.kubernetes.io/audit-version: latest
            pod-security.kubernetes.io/enforce: restricted
            pod-security.kubernetes.io/enforce-version: latest
            pod-security.kubernetes.io/warn: restricted
            pod-security.kubernetes.io/warn-version: latest
            security.openshift.io/scc.podSecurityLabelSync: "true"
          name: openshift-secondary-scheduler-operator
        spec:
          targetNamespaces:
          - openshift-secondary-scheduler-operator

  - name: Create operator group for Secondary Scheduler Operator
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: operators.coreos.com/v1
        kind: OperatorGroup
        metadata:
          name: openshift-secondary-scheduler-operator
          namespace: openshift-secondary-scheduler-operator
        spec:
          targetNamespaces:
          - openshift-secondary-scheduler-operator

  - name: Create subscription for Secondary Scheduler Operator
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: operators.coreos.com/v1alpha1
        kind: Subscription
        metadata:
          name: openshift-secondary-scheduler-operator
          namespace: openshift-secondary-scheduler-operator
        spec:
          channel: "{{ sso_upgrade_channel }}"
          installPlanApproval: Automatic
          name: openshift-secondary-scheduler-operator
          source: "{{ sso_catalogsource }}"
          sourceNamespace: openshift-marketplace

  - name: Verification of operator installation
    block:
    - name: Check if the cluster service version has succeeded
      shell: oc get csv -n openshift-secondary-scheduler-operator --no-headers | awk '{ if (($1 ~ /^secondaryscheduleroperator/) && $NF=="Succeeded") print $1 }'| wc -l
      register: sso_operators_csv
      until: sso_operators_csv.stdout|int == 1
      retries: 5
      delay: 30

    - name: Check if pods are running
      shell: oc get pods -n openshift-secondary-scheduler-operator --no-headers | grep "scheduler-operator" | wc -l
      register: sso_pods
      until: sso_pods.stdout|int == 1
      retries: 5
      delay: 30

- name: Deploy Secondary Scheduler 
  block:
  - name: Deploy the ConfigMap "secondary-scheduler-config" for configuring the scheduler-plugin profile for test
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: "secondary-scheduler-config"
          namespace: "openshift-secondary-scheduler-operator"
        data:
          "config.yaml": |
            apiVersion: kubescheduler.config.k8s.io/v1
            kind: KubeSchedulerConfiguration
            leaderElection:
              leaderElect: false
            profiles:
              - schedulerName: secondary-scheduler
                plugins:
                  score:
                    disabled:
                      - name: NodeResourcesBalancedAllocation
                      - name: NodeResourcesLeastAllocated

  - name: Create Secondary scheduler 
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: operator.openshift.io/v1
        kind: SecondaryScheduler
        metadata:
          name: cluster
          namespace: openshift-secondary-scheduler-operator
        spec:
          logLevel: Normal
          operatorLogLevel: Normal
          managementState: Managed
          schedulerConfig: secondary-scheduler-config
          schedulerImage: "{{ sso_schedulerImage }}"

  - name: Verification secondary scheduler pods
    block:
    - name: Check the secondary-scheduler pods running
      shell: oc get pods -n openshift-secondary-scheduler-operator --no-headers | grep "Running" | wc -l
      register: sso_pods
      until: sso_pods.stdout|int == 2
      retries: 5
      delay: 10

    - name: Check if pods are running
      shell: oc get deploy -n openshift-secondary-scheduler-operator --no-headers | wc -l
      register: sso_pods
      until: sso_pods.stdout|int == 2
      retries: 5
      delay: 10

- name: Run e2e test cases
  block:
  - name: Install dependencies for running e2e tests
    dnf:
      name: make
      state: present

  - name: Include role for installation of Go lang
    include_role:
      name: golang-installation
    vars:
      go_tarball: "{{ sso_go_tarball }}"
      golang_path: "/usr/local"

  - name: Precheck - Ensure sso_github_username and sso_github_token are not empty while running E2E
    fail:
      msg: "The variables 'sso_github_username' and 'sso_github_token' must be set when sso_e2e is true."
    when: 
      - (sso_github_username == '' or sso_github_username == None) or
        (sso_github_token == '' or sso_github_token == None)

  - name: Clone the opeshift-test-private repository
    git:
      repo: "https://{{ sso_github_username }}:{{ sso_github_token }}@github.com{{ sso_e2e_github_repo | urlsplit('path') }}"
      dest: "{{ sso_directory }}/openshift-tests-private"
      version: "{{ sso_e2e_github_branch }}"

  - name: Run make target
    make:
      chdir: "{{ sso_directory }}/openshift-tests-private"
      target: build

  - name: Generate SSO Operator test cases list
    shell: |
      ./bin/extended-platform-tests run all --dry-run | grep "secondary-scheduler\|74405" > sso-e2e-test.txt
    args:
      chdir: "{{ sso_directory }}/openshift-tests-private"
    ignore_errors: true

  - name: Run Secondary Scheduler Operator e2e tests
    shell: |
      ./bin/extended-platform-tests run -f sso-e2e-test.txt -o sso-e2e-output.txt
    args:
      chdir: "{{ sso_directory }}/openshift-tests-private"
    ignore_errors: true

  environment: "{{ sso_e2e_env }}"
  ignore_errors: true
  when: sso_e2e

- name: Clean up SSO operator
  block:
  - name: Delete the SecondaryScheduler
    kubernetes.core.k8s:
      state: absent
      namespace: openshift-secondary-scheduler-operator
      kind: SecondaryScheduler
      name: cluster

  - name: Delete "secondary-scheduler-config" configmap
    kubernetes.core.k8s:
      state: absent
      namespace: openshift-secondary-scheduler-operator
      kind: ConfigMap
      name: secondary-scheduler-config

  - name: Get the name of cluster service version
    shell: oc get clusterserviceversion -n openshift-secondary-scheduler-operator --no-headers | awk '{ if ($1 ~ /secondaryscheduleroperator/) print $1 }'
    register: sso_csv

  - name: Get the name of subscription
    shell: oc get subscription -n openshift-secondary-scheduler-operator --no-headers | awk '{ print $1 }'
    register: sso_subscription

  - name: Get the name of operator group
    shell: oc get operatorgroup -n openshift-secondary-scheduler-operator --no-headers | awk '{ print $1 }'
    register: sso_operator_group

  - name: Delete the subscription if exists
    kubernetes.core.k8s:
      state: absent
      api_version: operators.coreos.com/v1alpha1
      kind: Subscription
      name: "{{ sso_subscription.stdout }}"
      namespace: openshift-secondary-scheduler-operator
    when: sso_subscription.stdout|length > 0

  - name: Delete the operator group if exists
    kubernetes.core.k8s:
      state: absent
      api_version: operators.coreos.com/v1
      kind: OperatorGroup
      name: "{{ sso_operator_group.stdout }}"
      namespace: openshift-secondary-scheduler-operator
    when: sso_operator_group.stdout|length > 0

  - name: Delete the cluster service version if exists
    kubernetes.core.k8s:
      state: absent
      api_version: operators.coreos.com/v1alpha1
      kind: ClusterServiceVersion
      name: "{{ sso_csv.stdout }}"
      namespace: openshift-secondary-scheduler-operator
    when: sso_csv.stdout|length > 0

  - name: Check if all the pods has been deleted
    shell: oc get pods -n openshift-secondary-scheduler-operator --no-headers | wc -l
    register: sso_pods
    until: sso_pods.stdout|int == 0
    retries: 15
    delay: 20

  - name: Delete the namespace if exists
    kubernetes.core.k8s:
      state: absent
      kind: Namespace
      name: openshift-secondary-scheduler-operator

  - name: Check if the namespace gets deleted
    shell: oc get namespace --no-headers | grep openshift-secondary-scheduler-operator | wc -l
    register: sso_namespace_count
    until: sso_namespace_count.stdout|int == 0
    retries: 15
    delay: 30

  - name: Delete the workplace
    file:
      state: absent
      path: "{{ sso_directory }}"
  when: sso_cleanup

